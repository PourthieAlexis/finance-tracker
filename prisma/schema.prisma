generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum Priority {
  LOW
  NORMAL
  HIGH
}

model User {
  id            String   @id @default(uuid()) @db.Char(36)
  name          String?
  image         String?
  emailVerified Boolean?
  username      String?  @unique
  email         String   @unique
  created_at    DateTime @default(now())
  bank_accounts BankAccount[] 
  budgets       Budget[]
  accounts      Account[]
  sessions      Session[]
  reminders     Reminder[]
}

model BankAccount {
  id           String        @id @default(uuid()) @db.Char(36)
  user_id      String
  account_name String
  balance      Float
  created_at   DateTime       @default(now())
  transactions BankTransaction[]
  User         User           @relation(fields: [user_id], references: [id])

  @@map("bank_accounts")
}

model BankTransaction {
  id             String   @id @default(uuid()) @db.Char(36)
  account_id     String
  amount         Float
  transaction_type TransactionType
  category       String
  description    String?
  date           DateTime @default(now())
  created_at     DateTime @default(now())
  BankAccount    BankAccount  @relation(fields: [account_id], references: [id])

  @@map("bank_transactions")
}

model Budget {
  id         String   @id @default(uuid()) @db.Char(36)
  user_id    String
  category   String
  amount     Float
  User       User     @relation(fields: [user_id], references: [id])
  start_date DateTime
  end_date   DateTime
  created_at DateTime @default(now())
}

model Account {
  id                 String  @id @default(uuid()) @db.Char(36)
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(uuid()) @db.Char(36)
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Reminder {
  id        String   @id @default(uuid()) @db.Char(36)
  text      String
  priority  Priority @default(NORMAL)
  dueDate   DateTime 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

